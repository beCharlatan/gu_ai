import math


# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа. Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток. Вычитание. Участвуют две клетки. Операцию необходимо выполнять только
# если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение. Умножение.
# Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух
# клеток. Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток. В классе необходимо реализовать метод make_order(), принимающий экземпляр класса
# и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида
# *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда
# не хватает, то в последний ряд записываются все оставшиеся. Например, количество ячеек клетки равняется 12,
# количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**. Или, количество ячеек клетки
# равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.
class Organule:
    def __init__(self, amount):
        self.amount = amount

    def __str__(self):
        return f'Клетка с количеством ячеек {self.amount}'

    def __add__(self, other):
        return Organule(self.amount + other.amount)

    def __sub__(self, other):
        if self.amount < other.amount:
            raise Exception('Разность должна быть больше нуля')
        else:
            return Organule(self.amount - other.amount)

    def __mul__(self, other):
        return Organule(self.amount * other.amount)

    def __truediv__(self, other):
        return Organule(math.floor(self.amount / other.amount))

    def make_order(self, items_in_row):
        result = ''
        full_rows_count, tail = divmod(self.amount, items_in_row)
        full_row_str = '*' * items_in_row + '\n'
        result += full_row_str * full_rows_count
        result += '*' * tail
        return result


org = Organule(32)
org1 = Organule(31)
org2 = org + org1
print(org2)
org3 = org1 * org2
print(org3)
org4 = org - org1
print(org4)
org5 = org3 / org2
print(org5)
order = org5.make_order(12)
print(order)
