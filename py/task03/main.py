# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у
# пользователя, предусмотреть обработку ситуации деления на ноль.
def fn():
    input_1 = int(input('Введите делимое: '))
    input_2 = int(input('Введите делитель: '))

    try:
        return input_1 / input_2
    except ZeroDivisionError as e:
        print(e)
        return None


print(fn())

# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия,
# год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.
first_name, last_name, birth_year, city, email, phone_number = input('Введите данные о пользователе через запятую('
                                                                     'имя, фамилия, год рождения, город проживания, '
                                                                     'email, '
                                                                     'телефон): ').split(', ')


def log_user_info(**kwargs):
    print(kwargs)
    return None


log_user_info(first_name=first_name, last_name=last_name, birth_year=birth_year, city=city, email=email,
              phone_number=phone_number)


# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух
# аргументов.
def my_func(a, b, c):
    arr = [a, b, c]
    minimum = min(arr)
    return sum(list(filter(lambda x: x != minimum, arr)))


print(my_func(1, 2, 3))


# Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить
# возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). При решении задания
# необходимо обойтись без встроенной функции возведения числа в степень. Подсказка: попробуйте решить задачу двумя
# способами. Первый — возведение в степень с помощью оператора **. Второй — более сложная реализация без оператора
# **, предусматривающая использование цикла.
def _my_func(x, y):
    return x ** y


print(_my_func(2, -3))


def _my_func_(x, y):
    orig_x = x
    for i in range(1, abs(y)):
        x *= orig_x

    return 1 / x


print(_my_func_(2, -3))


# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться
# сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь
# введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ,
# выполнение программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить
# сумму этих чисел к полученной ранее сумме и после этого завершить программу.
def is_int(n):
    try:
        int(n)
        return True
    except ValueError:
        return False


def get_sum():
    result = 0
    arr = input('Введите числа через пробел: ').split(' ')
    while True:
        go_end = False
        for i in arr:
            if is_int(i):
                result += int(i)
            else:
                go_end = True
                break

        if go_end:
            break

        print(result, 'Промежуточный результат')
        arr = input('Введите числа через пробел: ').split(' ')

    return result


print(get_sum())


# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной
# первой буквой. Например, print(int_func(‘text’)) -> Text. Продолжить работу над заданием. В программу должна
# попадать строка из слов, разделенных пробелом. Каждое слово состоит из латинских букв в нижнем регистре. Сделать
# вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. Необходимо использовать написанную
# ранее функцию int_func().
def int_func(a):
    if isinstance(a, str):
        return a.capitalize()
    else:
        raise Exception('Параметр обязан быть строкой')


print(int_func('ext'))


def _int_func(a):
    if isinstance(a, str):
        return ' '.join(list(map(int_func, a.split(' '))))
    else:
        raise Exception('Параметр обязан быть строкой')


print(_int_func('ext ext'))
